---
kind: pipeline
type: kubernetes
name: api

trigger:
  event:
    exclude:
      - tag
      - pull_request
      - promote

clone:
  disable: true

steps:
  - name: clone
    image: ecr.ops.stratanetwork.net/drone/git:latest-with-sdt-certs
    commands:
      - git clone $DRONE_REMOTE_URL .
      - git checkout ${DRONE_COMMIT_BRANCH}

  - name: version
    image: ecr.ops.stratanetwork.net/strata.app.version:latest
    pull: always
    environment:
      VERBOSE: true
      DRONE: $DRONE
    commands:
      - DRONE_DIR=$(pwd)
      - echo $(pwd)
      - cd /app
      - dotnet Strata.App.Version.dll $DRONE_DIR

  - name: build api
    image: ecr.ops.stratanetwork.net/ci-kit:latest
    pull: always
    environment:
      SONARLOGIN:
        from_secret: SONARLOGIN
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      ECR: 137608416256.dkr.ecr.us-east-1.amazonaws.com
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - VERSION=$(cat .version)
      - . /ci-kit/setup-build.sh ${DRONE_REPO_NAME}-api $VERSION
      - | 
        docker build . -f Dockerfile.api \
        -t $ECR/${DRONE_REPO_NAME}-api:$VERSION \
        --build-arg SONARLOGIN=$SONARLOGIN \
        --build-arg VERSION=$VERSION
      - aws ecr create-repository --repository-name ${DRONE_REPO_NAME}-api --image-scanning-configuration scanOnPush=true || true
      - docker push $ECR/${DRONE_REPO_NAME}-api:$VERSION


   - name: build web
    image: ecr.ops.stratanetwork.net/ci-kit:latest
    pull: always
    environment:
      SONARLOGIN:
        from_secret: SONARLOGIN
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      ECR: 137608416256.dkr.ecr.us-east-1.amazonaws.com
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - VERSION=$(cat .version)
      - . /ci-kit/setup-build.sh $DRONE_REPO_NAME $VERSION
      - | 
        docker build . -f Dockerfile.web \
        -t $ECR/${DRONE_REPO_NAME}-web:$VERSION \
        --build-arg SONARLOGIN=$SONARLOGIN \
        --build-arg VERSION=$VERSION
      - aws ecr create-repository --repository-name ${DRONE_REPO_NAME}-web --image-scanning-configuration scanOnPush=true || true
      - docker push $ECR/${DRONE_REPO_NAME}-web:$VERSION
  - name: build hangfire
    image: ecr.ops.stratanetwork.net/ci-kit:latest
    pull: always
    environment:
      SONARLOGIN:
        from_secret: SONARLOGIN
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      ECR: 137608416256.dkr.ecr.us-east-1.amazonaws.com
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - VERSION=$(cat .version)
      - . /ci-kit/setup-build.sh $DRONE_REPO_NAME $VERSION
      - | 
        docker build . -f Dockerfile.hangfire \
        -t $ECR/${DRONE_REPO_NAME}-hangfire:$VERSION \
        --build-arg VERSION=$VERSION
      - aws ecr create-repository --repository-name ${DRONE_REPO_NAME}-hangfire --image-scanning-configuration scanOnPush=true || true
      - docker push $ECR/${DRONE_REPO_NAME}-hangfire:$VERSION

  - name: build dashboard
    image: ecr.ops.stratanetwork.net/ci-kit:latest
    pull: always
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      ECR: 137608416256.dkr.ecr.us-east-1.amazonaws.com
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - VERSION=$(cat .version)
      - . /ci-kit/setup-build.sh $DRONE_REPO_NAME $VERSION
      - | 
        docker build . -f Dockerfile.dashboard \
        -t $ECR/${DRONE_REPO_NAME}-dashboard:$VERSION \
        --build-arg VERSION=$VERSION
      - aws ecr create-repository --repository-name ${DRONE_REPO_NAME}-dashboard --image-scanning-configuration scanOnPush=true || true
      - docker push $ECR/${DRONE_REPO_NAME}-dashboard:$VERSION
  - name: create octopus release
    image: ecr.ops.stratanetwork.net/octopusdeploy/octo
    pull: always
    environment:
      OCTOPUS_CLI_SERVER: https://octopus.sdt.local
      OCTOPUS_CLI_API_KEY:
        from_secret: OCTOPUS_CLI_API_KEY
    commands:
      - export VERSION=$(cat .version)
      - octo create-release --project=$DRONE_REPO_NAME --version=$VERSION --package=${DRONE_REPO_NAME}.Hangfire:$VERSION --ignoreSslErrors --ignoreExisting 
  - name: deploy octopus release
    image: ecr.ops.stratanetwork.net/octopusdeploy/octo
    pull: always
    environment:
      OCTOPUS_CLI_SERVER: https://octopus.sdt.local
      OCTOPUS_CLI_API_KEY:
        from_secret: OCTOPUS_CLI_API_KEY
    when:
      branch: master
      event: push
    commands:
      - export VERSION=$(cat .version)
      - octo deploy-release --project=$DRONE_REPO_NAME --version=$VERSION --deployTo=dev --progress --ignoreSslErrors
  - name: deploy octopus release (promote)
    image: ecr.ops.stratanetwork.net/octopusdeploy/octo
    pull: always
    environment:
      OCTOPUS_CLI_SERVER: https://octopus.sdt.local
      OCTOPUS_CLI_API_KEY:
        from_secret: OCTOPUS_CLI_API_KEY
    when:
      event: promote
    commands:
      - export VERSION=$(cat .version)
      - octo deploy-release --project=$DRONE_REPO_NAME --version=$VERSION --deployTo=dev --progress --ignoreSslErrors
